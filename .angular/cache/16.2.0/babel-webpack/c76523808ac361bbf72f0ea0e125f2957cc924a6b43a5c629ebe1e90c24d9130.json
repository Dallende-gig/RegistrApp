{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@awesome-cordova-plugins/sqlite/ngx\";\nimport * as i2 from \"../mensajeService/mensaje.service\";\nclass SQLiteService {\n  constructor(sqlite, mensajeService) {\n    this.sqlite = sqlite;\n    this.mensajeService = mensajeService;\n  }\n  verificarCredenciales(usuario, contrasena) {\n    return this.createDatabase().then(db => {\n      return db.executeSql('SELECT * FROM credencial WHERE usuario = ? AND contrasena = ?', [usuario, contrasena]).then(data => {\n        if (data.rows.length > 0) {\n          const user = data.rows.item(0);\n          // Supongamos que el nivel está almacenado en una columna llamada 'nivel'\n          return user.nivel; // Devuelve el nivel del usuario\n        }\n\n        return null; // No se encontraron credenciales válidas\n      }).catch(error => {\n        console.error('Error al ejecutar consulta en SQLite', error);\n        this.mensajeService.mostrarMensaje('No se han encontrado coincidencias');\n        return null; // Error al ejecutar la consulta\n      });\n    }).catch(error => {\n      console.error('Error al abrir la base de datos SQLite', error);\n      this.mensajeService.mostrarMensaje('Ha ocurrido un error interno de la base de datos');\n      return null; // Error al abrir la base de datos\n    });\n  }\n\n  createDatabase() {\n    return this.sqlite.create({\n      name: 'Registr.db',\n      location: 'default'\n    });\n  }\n  createTable() {\n    return this.createDatabase().then(db => {\n      return db.executeSql(`\n        CREATE TABLE IF NOT EXISTS credencial (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          usuario TEXT,\n          contrasena TEXT,\n          nivel TEXT\n        )`, []).then(() => {\n        console.log('Tabla de credenciales creada');\n        this.mensajeService.mostrarMensaje('Tabla creada');\n      }).catch(error => this.mensajeService.mostrarMensaje('Tabla NO creada'));\n    });\n  }\n  agregarCredencial(usuario, contrasena, nivel) {\n    return this.createDatabase().then(db => {\n      return db.executeSql('INSERT INTO credencial (usuario, contrasena, nivel) VALUES (?, ?, ?)', [usuario, contrasena, nivel]).then(() => {\n        console.log('Credencial agregada con éxito.');\n        this.mensajeService.mostrarMensaje('Credenciales creadas');\n      }).catch(error => this.mensajeService.mostrarMensaje('Error al crear las credenciales'));\n    });\n  }\n}\n_class = SQLiteService;\n_class.ɵfac = function SQLiteService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.SQLite), i0.ɵɵinject(i2.MensajeService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { SQLiteService };","map":{"version":3,"names":["SQLiteService","constructor","sqlite","mensajeService","verificarCredenciales","usuario","contrasena","createDatabase","then","db","executeSql","data","rows","length","user","item","nivel","catch","error","console","mostrarMensaje","create","name","location","createTable","log","agregarCredencial","i0","ɵɵinject","i1","SQLite","i2","MensajeService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DiegoAllende\\OneDrive - Comtec Global\\Escritorio\\cam\\RegistrApp\\src\\services\\SQLiteService\\sqlite.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { SQLite, SQLiteObject } from '@awesome-cordova-plugins/sqlite/ngx';\r\nimport { MensajeService } from '../mensajeService/mensaje.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SQLiteService {\r\n\r\n  constructor(\r\n    private sqlite: SQLite,\r\n    private mensajeService: MensajeService) { }\r\n\r\n  verificarCredenciales(usuario: string, contrasena: string): Promise<string | null> {\r\n    return this.createDatabase().then((db: SQLiteObject) => {\r\n      return db.executeSql('SELECT * FROM credencial WHERE usuario = ? AND contrasena = ?', [usuario, contrasena])\r\n        .then(data => {\r\n          if (data.rows.length > 0) {\r\n            const user = data.rows.item(0);\r\n            // Supongamos que el nivel está almacenado en una columna llamada 'nivel'\r\n            return user.nivel; // Devuelve el nivel del usuario\r\n          }\r\n          return null; // No se encontraron credenciales válidas\r\n        })\r\n        .catch(error => {\r\n          console.error('Error al ejecutar consulta en SQLite', error);\r\n          this.mensajeService.mostrarMensaje('No se han encontrado coincidencias');\r\n          return null; // Error al ejecutar la consulta\r\n        });\r\n    })\r\n    .catch(error => {\r\n      console.error('Error al abrir la base de datos SQLite', error);\r\n      this.mensajeService.mostrarMensaje('Ha ocurrido un error interno de la base de datos');\r\n      return null; // Error al abrir la base de datos\r\n    });\r\n  }\r\n\r\n  createDatabase() {\r\n    return this.sqlite.create({\r\n      name: 'Registr.db',\r\n      location: 'default'\r\n    });\r\n  }\r\n\r\n  createTable() {\r\n    return this.createDatabase().then((db: SQLiteObject) => {\r\n      return db.executeSql(`\r\n        CREATE TABLE IF NOT EXISTS credencial (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          usuario TEXT,\r\n          contrasena TEXT,\r\n          nivel TEXT\r\n        )`, [])\r\n        .then(() => {\r\n          console.log('Tabla de credenciales creada');\r\n          this.mensajeService.mostrarMensaje('Tabla creada')\r\n        })\r\n        .catch(error => this.mensajeService.mostrarMensaje('Tabla NO creada'));\r\n    });\r\n  }\r\n\r\n  agregarCredencial(usuario: string, contrasena: string, nivel: string) {\r\n    return this.createDatabase().then((db: SQLiteObject) => {\r\n      return db.executeSql('INSERT INTO credencial (usuario, contrasena, nivel) VALUES (?, ?, ?)', [usuario, contrasena, nivel])\r\n        .then(() => {\r\n          console.log('Credencial agregada con éxito.');\r\n          this.mensajeService.mostrarMensaje('Credenciales creadas')\r\n        })\r\n        .catch(error => this.mensajeService.mostrarMensaje('Error al crear las credenciales'));\r\n    });\r\n  }\r\n}\r\n"],"mappings":";;;;AAIA,MAGaA,aAAa;EAExBC,YACUC,MAAc,EACdC,cAA8B;IAD9B,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,cAAc,GAAdA,cAAc;EAAoB;EAE5CC,qBAAqBA,CAACC,OAAe,EAAEC,UAAkB;IACvD,OAAO,IAAI,CAACC,cAAc,EAAE,CAACC,IAAI,CAAEC,EAAgB,IAAI;MACrD,OAAOA,EAAE,CAACC,UAAU,CAAC,+DAA+D,EAAE,CAACL,OAAO,EAAEC,UAAU,CAAC,CAAC,CACzGE,IAAI,CAACG,IAAI,IAAG;QACX,IAAIA,IAAI,CAACC,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;UACxB,MAAMC,IAAI,GAAGH,IAAI,CAACC,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC;UAC9B;UACA,OAAOD,IAAI,CAACE,KAAK,CAAC,CAAC;;;QAErB,OAAO,IAAI,CAAC,CAAC;MACf,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAG;QACbC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC5D,IAAI,CAACf,cAAc,CAACiB,cAAc,CAAC,oCAAoC,CAAC;QACxE,OAAO,IAAI,CAAC,CAAC;MACf,CAAC,CAAC;IACN,CAAC,CAAC,CACDH,KAAK,CAACC,KAAK,IAAG;MACbC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,IAAI,CAACf,cAAc,CAACiB,cAAc,CAAC,kDAAkD,CAAC;MACtF,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,CAAC;EACJ;;EAEAb,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACL,MAAM,CAACmB,MAAM,CAAC;MACxBC,IAAI,EAAE,YAAY;MAClBC,QAAQ,EAAE;KACX,CAAC;EACJ;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACjB,cAAc,EAAE,CAACC,IAAI,CAAEC,EAAgB,IAAI;MACrD,OAAOA,EAAE,CAACC,UAAU,CAAC;;;;;;UAMjB,EAAE,EAAE,CAAC,CACNF,IAAI,CAAC,MAAK;QACTW,OAAO,CAACM,GAAG,CAAC,8BAA8B,CAAC;QAC3C,IAAI,CAACtB,cAAc,CAACiB,cAAc,CAAC,cAAc,CAAC;MACpD,CAAC,CAAC,CACDH,KAAK,CAACC,KAAK,IAAI,IAAI,CAACf,cAAc,CAACiB,cAAc,CAAC,iBAAiB,CAAC,CAAC;IAC1E,CAAC,CAAC;EACJ;EAEAM,iBAAiBA,CAACrB,OAAe,EAAEC,UAAkB,EAAEU,KAAa;IAClE,OAAO,IAAI,CAACT,cAAc,EAAE,CAACC,IAAI,CAAEC,EAAgB,IAAI;MACrD,OAAOA,EAAE,CAACC,UAAU,CAAC,sEAAsE,EAAE,CAACL,OAAO,EAAEC,UAAU,EAAEU,KAAK,CAAC,CAAC,CACvHR,IAAI,CAAC,MAAK;QACTW,OAAO,CAACM,GAAG,CAAC,gCAAgC,CAAC;QAC7C,IAAI,CAACtB,cAAc,CAACiB,cAAc,CAAC,sBAAsB,CAAC;MAC5D,CAAC,CAAC,CACDH,KAAK,CAACC,KAAK,IAAI,IAAI,CAACf,cAAc,CAACiB,cAAc,CAAC,iCAAiC,CAAC,CAAC;IAC1F,CAAC,CAAC;EACJ;;SA/DWpB,aAAa;;mBAAbA,MAAa,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;AAAA;;SAAbhC,MAAa;EAAAiC,OAAA,EAAbjC,MAAa,CAAAkC,IAAA;EAAAC,UAAA,EAFZ;AAAM;SAEPnC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}