{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/DiegoAllende/OneDrive - Comtec Global/Escritorio/registrapp/RegistrApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport axios from 'axios';\nlet ForgotPasswordPage = class ForgotPasswordPage {\n  constructor(router, alertController, alertService, emailService) {\n    this.router = router;\n    this.alertController = alertController;\n    this.alertService = alertService;\n    this.emailService = emailService;\n    this.email = '';\n  }\n  isValidEmail(email) {\n    // validacion del correo electrónico\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    return emailPattern.test(email);\n  }\n  //func reset password\n  resetPassword(email) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const apiKey = 'f6bb1a7bf37eac28cd3cf2f1c38c8f99cb687de9';\n        const emailToVerify = email.toLowerCase();\n        // Hacer una solicitud a la API de Hunter para verificar el correo\n        const hunterResponse = yield axios.get(`https://api.hunter.io/v2/email-verifier?email=${emailToVerify}&api_key=${apiKey}`);\n        const verificationResult = hunterResponse.data.data;\n        if (verificationResult.result === 'valid') {\n          console.log(`El correo electrónico ${email} es válido.`);\n        }\n        const users = [{\n          username: 'Diego',\n          email: 'di.allende@duocuc.cl',\n          password: '123456'\n        }, {\n          username: 'Cam',\n          email: 'al.grumi@duocuc.cl',\n          password: '12345'\n        }, {\n          username: 'Nicolas',\n          email: 'ni@profesor.duoc.cl',\n          password: '123456A'\n        }];\n        const matchingUser = users.find(user => user.email === emailToVerify);\n        // Generar el correo electrónico de recuperación\n        const userName = matchingUser === null || matchingUser === void 0 ? void 0 : matchingUser.username;\n        const resetLink = 'https://www.example.com/reset-password?email=' + (matchingUser === null || matchingUser === void 0 ? void 0 : matchingUser.email);\n        const emailBody = `\n          Estimado ${userName},\n\n          Ha solicitado restablecer su contraseña. Para hacerlo, haga clic en el siguiente enlace:\n\n          ${resetLink}\n\n          Si no solicitó restablecer su contraseña, ignore este correo electrónico.\n\n          Saludos,\n          El equipo de ejemplo\n        `;\n        // Enviar el correo electrónico\n        yield _this.emailService.sendEmail(email, 'Restablecimiento de contraseña', emailBody);\n        if (matchingUser) {\n          const alert = yield _this.alertController.create({\n            header: 'Usuario encontrado',\n            message: 'Se enviará un correo para restablecer la contraseña.',\n            buttons: [{\n              text: 'OK',\n              handler: () => {\n                _this.navigateToHome(); // Llama a navigateToHome cuando se hace clic en \"OK\"\n              }\n            }]\n          });\n\n          yield alert.present();\n        } else {\n          // El usuario no existe\n          const alert = yield _this.alertController.create({\n            header: 'Error',\n            message: 'Favor ponte en contacto con tu administrador.',\n            buttons: [{\n              text: 'OK',\n              handler: () => {\n                _this.navigateToHome(); // Llama a navigateToHome cuando se hace clic en \"OK\"\n              }\n            }]\n          });\n\n          yield alert.present();\n        }\n      } catch (error) {\n        console.error('Error al validar el correo electrónico:', error);\n      }\n    })();\n  }\n  navigateToHome() {\n    this.router.navigate(['/home']);\n  }\n  ngOnInit() {}\n};\nForgotPasswordPage = __decorate([Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.page.html',\n  styleUrls: ['./forgot-password.page.scss']\n})], ForgotPasswordPage);\nexport { ForgotPasswordPage };","map":{"version":3,"names":["Component","axios","ForgotPasswordPage","constructor","router","alertController","alertService","emailService","email","isValidEmail","emailPattern","test","resetPassword","_this","_asyncToGenerator","apiKey","emailToVerify","toLowerCase","hunterResponse","get","verificationResult","data","result","console","log","users","username","password","matchingUser","find","user","userName","resetLink","emailBody","sendEmail","alert","create","header","message","buttons","text","handler","navigateToHome","present","error","navigate","ngOnInit","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\DiegoAllende\\OneDrive - Comtec Global\\Escritorio\\registrapp\\RegistrApp\\src\\app\\home\\forgot\\forgot-password.page.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AlertController } from '@ionic/angular';\r\nimport { AlertServiceService } from 'src/services/alertService/alert-service.service';\r\nimport axios from 'axios';\r\nimport { EmailService } from './email.service';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.page.html',\r\n  styleUrls: ['./forgot-password.page.scss'],\r\n})\r\nexport class ForgotPasswordPage implements OnInit {\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private alertController: AlertController,\r\n    private alertService: AlertServiceService,\r\n    private emailService: EmailService\r\n  ) { }\r\n\r\n\r\n  email: string = ''; \r\n  isValidEmail(email: string): boolean {\r\n    // validacion del correo electrónico\r\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n    return emailPattern.test(email);\r\n  }\r\n  //func reset password\r\n  async resetPassword(email: string) {\r\n    try{\r\n    const apiKey = 'f6bb1a7bf37eac28cd3cf2f1c38c8f99cb687de9'; \r\n      const emailToVerify = email.toLowerCase(); \r\n\r\n      // Hacer una solicitud a la API de Hunter para verificar el correo\r\n      const hunterResponse = await axios.get(`https://api.hunter.io/v2/email-verifier?email=${emailToVerify}&api_key=${apiKey}`);\r\n\r\n      const verificationResult = hunterResponse.data.data;\r\n\r\n      if (verificationResult.result === 'valid') {\r\n        console.log(`El correo electrónico ${email} es válido.`);\r\n      }\r\n\r\n      const users = [\r\n        { username: 'Diego', email: 'di.allende@duocuc.cl', password: '123456' },\r\n        { username: 'Cam', email: 'al.grumi@duocuc.cl', password: '12345' },\r\n        { username: 'Nicolas', email: 'ni@profesor.duoc.cl', password: '123456A' }\r\n      ];\r\n\r\n      const matchingUser = users.find(user => user.email === emailToVerify);\r\n        // Generar el correo electrónico de recuperación\r\n        const userName = matchingUser?.username;\r\n        const resetLink = 'https://www.example.com/reset-password?email=' + matchingUser?.email;\r\n        const emailBody = `\r\n          Estimado ${userName},\r\n\r\n          Ha solicitado restablecer su contraseña. Para hacerlo, haga clic en el siguiente enlace:\r\n\r\n          ${resetLink}\r\n\r\n          Si no solicitó restablecer su contraseña, ignore este correo electrónico.\r\n\r\n          Saludos,\r\n          El equipo de ejemplo\r\n        `;\r\n\r\n        // Enviar el correo electrónico\r\n        await this.emailService.sendEmail(email, 'Restablecimiento de contraseña', emailBody);\r\n        if (matchingUser) {\r\n          const alert = await this.alertController.create({\r\n            header: 'Usuario encontrado',\r\n            message: 'Se enviará un correo para restablecer la contraseña.',\r\n            buttons: [{\r\n              text: 'OK',\r\n              handler: () => {\r\n                this.navigateToHome();  // Llama a navigateToHome cuando se hace clic en \"OK\"\r\n              } \r\n            }]\r\n          });\r\n          await alert.present();\r\n        } else {\r\n          // El usuario no existe\r\n          const alert = await this.alertController.create({\r\n            header: 'Error',\r\n            message: 'Favor ponte en contacto con tu administrador.',\r\n            buttons: [{\r\n              text: 'OK',\r\n              handler: () => {\r\n                this.navigateToHome();  // Llama a navigateToHome cuando se hace clic en \"OK\"\r\n              }\r\n            }]\r\n          });\r\n        await alert.present();\r\n      }\r\n    }  \r\n    catch (error: any) {\r\n      console.error('Error al validar el correo electrónico:', error);\r\n    }\r\n  }\r\n\r\n  \r\n  navigateToHome() {\r\n    this.router.navigate(['/home']);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n} \r\n\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAgB,eAAe;AAIjD,OAAOC,KAAK,MAAM,OAAO;AAQzB,IAAaC,kBAAkB,GAA/B,MAAaA,kBAAkB;EAE7BC,YACUC,MAAc,EACdC,eAAgC,EAChCC,YAAiC,EACjCC,YAA0B;IAH1B,KAAAH,MAAM,GAANA,MAAM;IACN,KAAAC,eAAe,GAAfA,eAAe;IACf,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,YAAY,GAAZA,YAAY;IAItB,KAAAC,KAAK,GAAW,EAAE;EAHd;EAIJC,YAAYA,CAACD,KAAa;IACxB;IACA,MAAME,YAAY,GAAG,mDAAmD;IACxE,OAAOA,YAAY,CAACC,IAAI,CAACH,KAAK,CAAC;EACjC;EACA;EACMI,aAAaA,CAACJ,KAAa;IAAA,IAAAK,KAAA;IAAA,OAAAC,iBAAA;MAC/B,IAAG;QACH,MAAMC,MAAM,GAAG,0CAA0C;QACvD,MAAMC,aAAa,GAAGR,KAAK,CAACS,WAAW,EAAE;QAEzC;QACA,MAAMC,cAAc,SAASjB,KAAK,CAACkB,GAAG,CAAC,iDAAiDH,aAAa,YAAYD,MAAM,EAAE,CAAC;QAE1H,MAAMK,kBAAkB,GAAGF,cAAc,CAACG,IAAI,CAACA,IAAI;QAEnD,IAAID,kBAAkB,CAACE,MAAM,KAAK,OAAO,EAAE;UACzCC,OAAO,CAACC,GAAG,CAAC,yBAAyBhB,KAAK,aAAa,CAAC;;QAG1D,MAAMiB,KAAK,GAAG,CACZ;UAAEC,QAAQ,EAAE,OAAO;UAAElB,KAAK,EAAE,sBAAsB;UAAEmB,QAAQ,EAAE;QAAQ,CAAE,EACxE;UAAED,QAAQ,EAAE,KAAK;UAAElB,KAAK,EAAE,oBAAoB;UAAEmB,QAAQ,EAAE;QAAO,CAAE,EACnE;UAAED,QAAQ,EAAE,SAAS;UAAElB,KAAK,EAAE,qBAAqB;UAAEmB,QAAQ,EAAE;QAAS,CAAE,CAC3E;QAED,MAAMC,YAAY,GAAGH,KAAK,CAACI,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACtB,KAAK,KAAKQ,aAAa,CAAC;QACnE;QACA,MAAMe,QAAQ,GAAGH,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEF,QAAQ;QACvC,MAAMM,SAAS,GAAG,+CAA+C,IAAGJ,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEpB,KAAK;QACvF,MAAMyB,SAAS,GAAG;qBACLF,QAAQ;;;;YAIjBC,SAAS;;;;;;SAMZ;QAED;QACA,MAAMnB,KAAI,CAACN,YAAY,CAAC2B,SAAS,CAAC1B,KAAK,EAAE,gCAAgC,EAAEyB,SAAS,CAAC;QACrF,IAAIL,YAAY,EAAE;UAChB,MAAMO,KAAK,SAAStB,KAAI,CAACR,eAAe,CAAC+B,MAAM,CAAC;YAC9CC,MAAM,EAAE,oBAAoB;YAC5BC,OAAO,EAAE,sDAAsD;YAC/DC,OAAO,EAAE,CAAC;cACRC,IAAI,EAAE,IAAI;cACVC,OAAO,EAAEA,CAAA,KAAK;gBACZ5B,KAAI,CAAC6B,cAAc,EAAE,CAAC,CAAE;cAC1B;aACD;WACF,CAAC;;UACF,MAAMP,KAAK,CAACQ,OAAO,EAAE;SACtB,MAAM;UACL;UACA,MAAMR,KAAK,SAAStB,KAAI,CAACR,eAAe,CAAC+B,MAAM,CAAC;YAC9CC,MAAM,EAAE,OAAO;YACfC,OAAO,EAAE,+CAA+C;YACxDC,OAAO,EAAE,CAAC;cACRC,IAAI,EAAE,IAAI;cACVC,OAAO,EAAEA,CAAA,KAAK;gBACZ5B,KAAI,CAAC6B,cAAc,EAAE,CAAC,CAAE;cAC1B;aACD;WACF,CAAC;;UACJ,MAAMP,KAAK,CAACQ,OAAO,EAAE;;OAExB,CACD,OAAOC,KAAU,EAAE;QACjBrB,OAAO,CAACqB,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;;IAChE;EACH;EAGAF,cAAcA,CAAA;IACZ,IAAI,CAACtC,MAAM,CAACyC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACjC;EAEAC,QAAQA,CAAA,GACR;CAED;AAhGY5C,kBAAkB,GAAA6C,UAAA,EAL9B/C,SAAS,CAAC;EACTgD,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWhD,kBAAkB,CAgG9B;SAhGYA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}