{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/DiegoAllende/OneDrive - Comtec Global/Escritorio/registrapp/RegistrApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport axios from 'axios';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"src/services/alertService/alert-service.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction ForgotPasswordPage_ion_item_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-label\", 8);\n    i0.ɵɵtext(2, \"Formato erroneo de Email\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function () {\n  return {\n    standalone: true\n  };\n};\nclass ForgotPasswordPage {\n  constructor(router, alertController, alertService) {\n    this.router = router;\n    this.alertController = alertController;\n    this.alertService = alertService;\n    this.email = '';\n  }\n  isValidEmail(email) {\n    // validacion del correo electrónico\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    return emailPattern.test(email);\n  }\n  //func reset password\n  resetPassword(email) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const apiKey = 'f6bb1a7bf37eac28cd3cf2f1c38c8f99cb687de9';\n        const emailToVerify = email.toLowerCase();\n        // Hacer una solicitud a la API de Hunter para verificar el correo\n        const hunterResponse = yield axios.get(`https://api.hunter.io/v2/email-verifier?email=${emailToVerify}&api_key=${apiKey}`);\n        const verificationResult = hunterResponse.data.data;\n        if (verificationResult.result === 'valid') {\n          console.log(`El correo electrónico ${email} es válido.`);\n        }\n        const users = [{\n          username: 'Diego',\n          email: 'di.allende@duocuc.cl',\n          password: '123456'\n        }, {\n          username: 'Cam',\n          email: 'al.grumi@duocuc.cl',\n          password: '12345'\n        }, {\n          username: 'Nicolas',\n          email: 'ni@profesor.duoc.cl',\n          password: '123456A'\n        }];\n        const matchingUser = users.find(user => user.email === emailToVerify);\n        // Generar el correo electrónico de recuperación\n        const userName = matchingUser === null || matchingUser === void 0 ? void 0 : matchingUser.username;\n        const resetLink = 'https://www.example.com/reset-password?email=' + (matchingUser === null || matchingUser === void 0 ? void 0 : matchingUser.email);\n        const emailBody = `\n          Estimado ${userName},\n\n          Ha solicitado restablecer su contraseña. Para hacerlo, haga clic en el siguiente enlace:\n\n          ${resetLink}\n\n          Si no solicitó restablecer su contraseña, ignore este correo electrónico.\n\n          Saludos,\n          El equipo de ejemplo\n        `;\n        // Enviar el correo electrónico\n        yield _this.emailService.sendEmail(email, 'Restablecimiento de contraseña', emailBody);\n        if (matchingUser) {\n          const alert = yield _this.alertController.create({\n            header: 'Usuario encontrado',\n            message: 'Se enviará un correo para restablecer la contraseña.',\n            buttons: [{\n              text: 'OK',\n              handler: () => {\n                _this.navigateToHome(); // Llama a navigateToHome cuando se hace clic en \"OK\"\n              }\n            }]\n          });\n\n          yield alert.present();\n        } else {\n          // El usuario no existe\n          const alert = yield _this.alertController.create({\n            header: 'Error',\n            message: 'Favor ponte en contacto con tu administrador.',\n            buttons: [{\n              text: 'OK',\n              handler: () => {\n                _this.navigateToHome(); // Llama a navigateToHome cuando se hace clic en \"OK\"\n              }\n            }]\n          });\n\n          yield alert.present();\n        }\n      } catch (error) {\n        console.error('Error al validar el correo electrónico:', error);\n      }\n    })();\n  }\n  navigateToHome() {\n    this.router.navigate(['/home']);\n  }\n  ngOnInit() {}\n}\n_class = ForgotPasswordPage;\n_class.ɵfac = function ForgotPasswordPage_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AlertController), i0.ɵɵdirectiveInject(i3.AlertServiceService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-forgot-password\"]],\n  decls: 17,\n  vars: 6,\n  consts: [[3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"medium\"], [3, \"ngSubmit\"], [\"position\", \"floating\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"required\", \"\", 3, \"ngModel\", \"ngModelOptions\", \"ngModelChange\"], [4, \"ngIf\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 3, \"disabled\"], [\"color\", \"danger\", \"position\", \"stacked\"]],\n  template: function ForgotPasswordPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-content\", 0)(1, \"ion-header\", 1)(2, \"ion-toolbar\")(3, \"ion-title\", 2);\n      i0.ɵɵtext(4, \"Restauracion de contrase\\u00F1a\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(5, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function ForgotPasswordPage_Template_form_ngSubmit_5_listener() {\n        return ctx.resetPassword(ctx.email);\n      });\n      i0.ɵɵelementStart(6, \"h2\");\n      i0.ɵɵtext(7, \"Olvidaste tu contrase\\u00F1a?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"p\");\n      i0.ɵɵtext(9, \"Ingresa tu direcci\\u00F3n de correo electr\\u00F3nico y te enviaremos instrucciones para restablecer tu contrase\\u00F1a.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"ion-item\")(11, \"ion-label\", 4);\n      i0.ɵɵtext(12, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"ion-input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function ForgotPasswordPage_Template_ion_input_ngModelChange_13_listener($event) {\n        return ctx.email = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(14, ForgotPasswordPage_ion_item_14_Template, 3, 0, \"ion-item\", 6);\n      i0.ɵɵelementStart(15, \"ion-button\", 7);\n      i0.ɵɵtext(16, \"Reestablecer contrase\\u00F1a\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"fullscreen\", true);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngModel\", ctx.email)(\"ngModelOptions\", i0.ɵɵpureFunction0(5, _c0));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.email && !ctx.isValidEmail(ctx.email));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.isValidEmail(ctx.email));\n    }\n  },\n  dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.NgModel, i5.NgForm, i2.IonButton, i2.IonContent, i2.IonHeader, i2.IonInput, i2.IonItem, i2.IonLabel, i2.IonTitle, i2.IonToolbar, i2.TextValueAccessor],\n  styles: [\"a[_ngcontent-%COMP%] {\\n  color: white;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvaG9tZS9mb3Jnb3QvZm9yZ290LXBhc3N3b3JkLnBhZ2Uuc2NzcyIsIndlYnBhY2s6Ly8uLy4uLy4uLy4uLy4uL09uZURyaXZlJTIwLSUyMENvbXRlYyUyMEdsb2JhbC9Fc2NyaXRvcmlvL3JlZ2lzdHJhcHAvUmVnaXN0ckFwcC9zcmMvYXBwL2hvbWUvZm9yZ290L2ZvcmdvdC1wYXNzd29yZC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxZQUFBO0FDQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJhe1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG59XHJcbiAgIiwiYSB7XG4gIGNvbG9yOiB3aGl0ZTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});\nexport { ForgotPasswordPage };","map":{"version":3,"names":["axios","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ForgotPasswordPage","constructor","router","alertController","alertService","email","isValidEmail","emailPattern","test","resetPassword","_this","_asyncToGenerator","apiKey","emailToVerify","toLowerCase","hunterResponse","get","verificationResult","data","result","console","log","users","username","password","matchingUser","find","user","userName","resetLink","emailBody","emailService","sendEmail","alert","create","header","message","buttons","text","handler","navigateToHome","present","error","navigate","ngOnInit","ɵɵdirectiveInject","i1","Router","i2","AlertController","i3","AlertServiceService","selectors","decls","vars","consts","template","ForgotPasswordPage_Template","rf","ctx","ɵɵlistener","ForgotPasswordPage_Template_form_ngSubmit_5_listener","ForgotPasswordPage_Template_ion_input_ngModelChange_13_listener","$event","ɵɵtemplate","ForgotPasswordPage_ion_item_14_Template","ɵɵproperty","ɵɵadvance","ɵɵpureFunction0","_c0"],"sources":["C:\\Users\\DiegoAllende\\OneDrive - Comtec Global\\Escritorio\\registrapp\\RegistrApp\\src\\app\\home\\forgot\\forgot-password.page.ts","C:\\Users\\DiegoAllende\\OneDrive - Comtec Global\\Escritorio\\registrapp\\RegistrApp\\src\\app\\home\\forgot\\forgot-password.page.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AlertController } from '@ionic/angular';\r\nimport { AlertServiceService } from 'src/services/alertService/alert-service.service';\r\nimport axios from 'axios';\r\n\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.page.html',\r\n  styleUrls: ['./forgot-password.page.scss'],\r\n})\r\nexport class ForgotPasswordPage implements OnInit {\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private alertController: AlertController,\r\n    private alertService: AlertServiceService\r\n  ) { }\r\n\r\n\r\n  email: string = ''; \r\n  isValidEmail(email: string): boolean {\r\n    // validacion del correo electrónico\r\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n    return emailPattern.test(email);\r\n  }\r\n  //func reset password\r\n  async resetPassword(email: string) {\r\n    try{\r\n    const apiKey = 'f6bb1a7bf37eac28cd3cf2f1c38c8f99cb687de9'; \r\n      const emailToVerify = email.toLowerCase(); \r\n\r\n      // Hacer una solicitud a la API de Hunter para verificar el correo\r\n      const hunterResponse = await axios.get(`https://api.hunter.io/v2/email-verifier?email=${emailToVerify}&api_key=${apiKey}`);\r\n\r\n      const verificationResult = hunterResponse.data.data;\r\n\r\n      if (verificationResult.result === 'valid') {\r\n        console.log(`El correo electrónico ${email} es válido.`);\r\n      }\r\n\r\n      const users = [\r\n        { username: 'Diego', email: 'di.allende@duocuc.cl', password: '123456' },\r\n        { username: 'Cam', email: 'al.grumi@duocuc.cl', password: '12345' },\r\n        { username: 'Nicolas', email: 'ni@profesor.duoc.cl', password: '123456A' }\r\n      ];\r\n\r\n      const matchingUser = users.find(user => user.email === emailToVerify);\r\n        // Generar el correo electrónico de recuperación\r\n        const userName = matchingUser?.username;\r\n        const resetLink = 'https://www.example.com/reset-password?email=' + matchingUser?.email;\r\n        const emailBody = `\r\n          Estimado ${userName},\r\n\r\n          Ha solicitado restablecer su contraseña. Para hacerlo, haga clic en el siguiente enlace:\r\n\r\n          ${resetLink}\r\n\r\n          Si no solicitó restablecer su contraseña, ignore este correo electrónico.\r\n\r\n          Saludos,\r\n          El equipo de ejemplo\r\n        `;\r\n\r\n        // Enviar el correo electrónico\r\n        await this.emailService.sendEmail(email, 'Restablecimiento de contraseña', emailBody);\r\n        if (matchingUser) {\r\n          const alert = await this.alertController.create({\r\n            header: 'Usuario encontrado',\r\n            message: 'Se enviará un correo para restablecer la contraseña.',\r\n            buttons: [{\r\n              text: 'OK',\r\n              handler: () => {\r\n                this.navigateToHome();  // Llama a navigateToHome cuando se hace clic en \"OK\"\r\n              } \r\n            }]\r\n          });\r\n          await alert.present();\r\n        } else {\r\n          // El usuario no existe\r\n          const alert = await this.alertController.create({\r\n            header: 'Error',\r\n            message: 'Favor ponte en contacto con tu administrador.',\r\n            buttons: [{\r\n              text: 'OK',\r\n              handler: () => {\r\n                this.navigateToHome();  // Llama a navigateToHome cuando se hace clic en \"OK\"\r\n              }\r\n            }]\r\n          });\r\n        await alert.present();\r\n      }\r\n    }  \r\n    catch (error: any) {\r\n      console.error('Error al validar el correo electrónico:', error);\r\n    }\r\n  }\r\n\r\n  \r\n  navigateToHome() {\r\n    this.router.navigate(['/home']);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n} \r\n\r\n","<ion-content [fullscreen]=\"true\">\r\n  <ion-header collapse=\"condense\">\r\n    <ion-toolbar>\r\n      <ion-title size=\"medium\">Restauracion de contraseña</ion-title>\r\n    </ion-toolbar>\r\n  </ion-header>\r\n  <form (ngSubmit)=\"resetPassword(email)\">\r\n    <h2>Olvidaste tu contraseña?</h2>\r\n    <p>Ingresa tu dirección de correo electrónico y te enviaremos instrucciones para restablecer tu contraseña.</p>\r\n    \r\n    <ion-item>\r\n      <ion-label position=\"floating\">Email</ion-label>\r\n      <ion-input type=\"email\" id=\"email\" name=\"email\" [(ngModel)]=\"email\" [ngModelOptions]=\"{ standalone: true }\" required></ion-input>\r\n    </ion-item>\r\n    <ion-item *ngIf=\"email && !isValidEmail(email)\">\r\n      <ion-label color=\"danger\" position=\"stacked\">Formato erroneo de Email</ion-label>\r\n    </ion-item>\r\n\r\n    <ion-button mat-raised-button type=\"submit\" [disabled]=\"!isValidEmail(email)\">Reestablecer contraseña</ion-button>\r\n  \r\n  </form>\r\n\r\n</ion-content>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}